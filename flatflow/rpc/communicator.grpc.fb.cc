// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: communicator

#include "communicator_generated.h"
#include "communicator.grpc.fb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flatflow {
namespace rpc {

static const char* Communicator_method_names[] = {
  "/flatflow.rpc.Communicator/Init",
  "/flatflow.rpc.Communicator/Broadcast",
  "/flatflow.rpc.Communicator/Finalize",
};

std::unique_ptr< Communicator::Stub> Communicator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& /*options*/) {
  std::unique_ptr< Communicator::Stub> stub(new Communicator::Stub(channel));
  return stub;
}

Communicator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_Init_(Communicator_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Broadcast_(Communicator_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Finalize_(Communicator_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Communicator::Stub::Init(::grpc::ClientContext* context, const flatbuffers::grpc::Message<InitRequest>& request, flatbuffers::grpc::Message<Empty>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Init_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<Empty>>* Communicator::Stub::AsyncInitRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<InitRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<Empty>>::Create(channel_.get(), cq, rpcmethod_Init_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<Empty>>* Communicator::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<InitRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<Empty>>::Create(channel_.get(), cq, rpcmethod_Init_, context, request, false);
}

::grpc::Status Communicator::Stub::Broadcast(::grpc::ClientContext* context, const flatbuffers::grpc::Message<BroadcastRequest>& request, flatbuffers::grpc::Message<BroadcastResponse>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Broadcast_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<BroadcastResponse>>* Communicator::Stub::AsyncBroadcastRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<BroadcastRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<BroadcastResponse>>::Create(channel_.get(), cq, rpcmethod_Broadcast_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<BroadcastResponse>>* Communicator::Stub::PrepareAsyncBroadcastRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<BroadcastRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<BroadcastResponse>>::Create(channel_.get(), cq, rpcmethod_Broadcast_, context, request, false);
}

::grpc::Status Communicator::Stub::Finalize(::grpc::ClientContext* context, const flatbuffers::grpc::Message<Empty>& request, flatbuffers::grpc::Message<Empty>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Finalize_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<Empty>>* Communicator::Stub::AsyncFinalizeRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<Empty>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<Empty>>::Create(channel_.get(), cq, rpcmethod_Finalize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<Empty>>* Communicator::Stub::PrepareAsyncFinalizeRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<Empty>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<Empty>>::Create(channel_.get(), cq, rpcmethod_Finalize_, context, request, false);
}

Communicator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communicator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Communicator::Service, flatbuffers::grpc::Message<InitRequest>, flatbuffers::grpc::Message<Empty>>(
          std::mem_fn(&Communicator::Service::Init), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communicator_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Communicator::Service, flatbuffers::grpc::Message<BroadcastRequest>, flatbuffers::grpc::Message<BroadcastResponse>>(
          std::mem_fn(&Communicator::Service::Broadcast), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communicator_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Communicator::Service, flatbuffers::grpc::Message<Empty>, flatbuffers::grpc::Message<Empty>>(
          std::mem_fn(&Communicator::Service::Finalize), this)));
}

Communicator::Service::~Service() {
}

::grpc::Status Communicator::Service::Init(::grpc::ServerContext* /*context*/, const flatbuffers::grpc::Message<InitRequest>* /*request*/, flatbuffers::grpc::Message<Empty>* /*response*/) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Communicator::Service::Broadcast(::grpc::ServerContext* /*context*/, const flatbuffers::grpc::Message<BroadcastRequest>* /*request*/, flatbuffers::grpc::Message<BroadcastResponse>* /*response*/) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Communicator::Service::Finalize(::grpc::ServerContext* /*context*/, const flatbuffers::grpc::Message<Empty>* /*request*/, flatbuffers::grpc::Message<Empty>* /*response*/) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flatflow
}  // namespace rpc

